from MQTT_UI import Ui_MainWindow #Generated by Qt Designer
from PyQt4 import QtCore, QtGui #for gui
import paho.mqtt.client as mqtt #for mqtt
import sys #for exit

class StartQT4(QtGui.QMainWindow):
    client1 = mqtt.Client() #for raspberry pi
    client2 = mqtt.Client() #for simple mqtt test

    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        #<Buttons>######################################################################################
        self.ui.pushButton_1.clicked.connect(self.pushButton_1)
        self.ui.pushButton_2.clicked.connect(self.pushButton_2)
        self.ui.pushButton_3.clicked.connect(self.pushButton_3)
        self.ui.pushButton_4.clicked.connect(self.pushButton_4)
        self.ui.pushButton_5.clicked.connect(self.pushButton_5)
        self.ui.pushButton_6.clicked.connect(self.pushButton_6)
        self.ui.pushButton_7.clicked.connect(self.pushButton_7)
        self.ui.pushButton_8.clicked.connect(self.pushButton_8)
        self.ui.pushButton_9.clicked.connect(self.pushButton_9)
        self.ui.pushButton_10.clicked.connect(self.pushButton_10)
        self.ui.pushButton_11.clicked.connect(self.pushButton_11)
        self.ui.pushButton_12.clicked.connect(self.pushButton_12)
        self.ui.pushButton_13.clicked.connect(self.pushButton_13)
        self.ui.pushButton_14.clicked.connect(self.pushButton_14)
        self.ui.pushButton_15.clicked.connect(self.pushButton_15)
        self.ui.pushButton_16.clicked.connect(self.pushButton_16)
        self.ui.pushButton_17.clicked.connect(self.pushButton_17)
        self.ui.pushButton_18.clicked.connect(self.pushButton_18)
        self.ui.pushButton_19.clicked.connect(self.pushButton_19)
        self.ui.pushButton_20.clicked.connect(self.pushButton_20)
        self.ui.pushButton_21.clicked.connect(self.pushButton_21)
        self.ui.pushButton_22.clicked.connect(self.pushButton_22)
        self.ui.pushButton_23.clicked.connect(self.pushButton_23)
        self.ui.pushButton_24.clicked.connect(self.pushButton_24)
        #</Buttons>#####################################################################################

        #<MQTT Calbacks>####################################################################################
        # Called when client1 is connected
        def on_connect1(client, userdata, flags, rc):
            print("Client 1:  Connected with result code " + str(rc)) #'0' means ok
            self.client1.subscribe(str(self.ui.lineEdit_4.text()))

        # Called when a message has been received on a topic that the client subscribes to.
        def on_message1(client, userdata, msg):
            print('Client: 1, ' + 'Topic: ' + msg.topic + ', Payload: ' + str(msg.payload))
            self.updateDisplay(str(msg.payload))

        # Called when the client disconnects from the broker.
        def on_disconnect1(client, userdata, rc):
            if rc != 0:
                print("Client 1: Unexpected disconnection.")
            else:
                print("Client 1: Clean disconnect.")

        # Called when client2 is connected
        def on_connect2(client, userdata, flags, rc):
            print("Client 2: Connected with result code " + str(rc)) #'0' means ok

        # Called when a message has been received on a topic that the client subscribes to.
        def on_message2(client, userdata, msg):
            print('Client: 2, ' + 'Topic: ' + msg.topic + ', Payload: ' + str(msg.payload))
            self.ui.lineEdit_9.setText(str(msg.payload).split('\'')[1])

        # Called when the client disconnects from the broker.
        def on_disconnect2(client, userdata, rc):
            if rc != 0:
                print("Client 2: Unexpected disconnection.")
            else:
                print("Client 2: Clean disconnect.")

        # assigning each client to its own callback funtion.
        # (callback is a function that will be automatically called when an event occurred)
        self.client1.on_connect = on_connect1
        self.client1.on_disconnect = on_disconnect1
        self.client1.on_message = on_message1

        self.client2.on_connect = on_connect2
        self.client2.on_disconnect = on_disconnect2
        self.client2.on_message = on_message2
        # </MQTT Calbacks>###################################################################################

    ###<button_methods>####
    def pushButton_1(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'A')

    def pushButton_2(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'B')

    def pushButton_3(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'C')

    def pushButton_4(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'D')

    def pushButton_5(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'E')

    def pushButton_6(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'F')

    def pushButton_7(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'G')

    def pushButton_8(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'H')

    def pushButton_9(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'I')

    def pushButton_10(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'J')

    def pushButton_11(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'K')

    def pushButton_12(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'L')

    def pushButton_13(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'M')

    def pushButton_14(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'N')

    def pushButton_15(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'O')

    def pushButton_16(self):
        self.client1.publish(str(self.ui.lineEdit_3.text()), 'P')

    def pushButton_17(self):
        self.client1.loop_start()  # creates a new thread for client1
        self.client1.connect(str(self.ui.lineEdit_1.text()), int(self.ui.lineEdit_2.text()))

    def pushButton_18(self):
        self.client1.reconnect()

    def pushButton_19(self):
        self.client2.loop_start() # creates a new thread for client2
        self.client2.connect(str(self.ui.lineEdit_5.text()), int(self.ui.lineEdit_6.text()))

    def pushButton_20(self):
        self.client2.disconnect()

    def pushButton_21(self):
        self.client2.reconnect()

    def pushButton_22(self):
        self.client2.publish(str(self.ui.lineEdit_8.text()), str(self.ui.lineEdit_10.text()))

    def pushButton_23(self):
        self.client2.subscribe(str(self.ui.lineEdit_7.text()))

    def pushButton_24(self):
        self.client2.unsubscribe(str(self.ui.lineEdit_7.text()))
    ###</buttons_methods>###

    def updateDisplay(self, pl): #assumes data is csv formatted
        payload =  str(pl)
        payload = payload.split('\'')
        payload = payload[1].split(',')
        self.ui.progressBar_1.setValue(float(payload[0]))
        self.ui.progressBar_2.setValue(float(payload[1]))
        self.ui.progressBar_3.setValue(float(payload[2]))
        self.ui.progressBar_4.setValue(float(payload[3]))
        self.ui.progressBar_5.setValue(float(payload[4]))
        self.ui.progressBar_6.setValue(float(payload[5]))
        self.ui.progressBar_7.setValue(float(payload[6]))
        self.ui.progressBar_8.setValue(float(payload[7]))
        self.ui.progressBar_9.setValue(float(payload[8]))

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    MainWindow = StartQT4()
    MainWindow.show()
    sys.exit(app.exec_())