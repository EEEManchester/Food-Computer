<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="support__software__serial_8cpp" kind="file" language="C++">
    <compoundname>support_software_serial.cpp</compoundname>
    <includes local="no">avr/interrupt.h</includes>
    <includes local="no">avr/pgmspace.h</includes>
    <includes local="no">Arduino.h</includes>
    <includes refid="support__software__serial_8h" local="yes">support_software_serial.h</includes>
    <includes local="no">util/delay_basic.h</includes>
    <incdepgraph>
      <node id="158">
        <label>src/support_software_serial.cpp</label>
        <link refid="support_software_serial.cpp"/>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
      </node>
      <node id="162">
        <label>support_software_serial.h</label>
        <link refid="support__software__serial_8h"/>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
      </node>
      <node id="159">
        <label>avr/interrupt.h</label>
      </node>
      <node id="165">
        <label>util/delay_basic.h</label>
      </node>
      <node id="160">
        <label>avr/pgmspace.h</label>
      </node>
      <node id="161">
        <label>Arduino.h</label>
      </node>
      <node id="164">
        <label>Stream.h</label>
      </node>
      <node id="163">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="support__software__serial_8cpp_1a152fc5203b90b1cff03b7b78579b8f52" prot="public" static="no">
        <name>_DEBUG</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jakerye/projects/gro-microcontroller/src/support_software_serial.cpp" line="40" column="9" bodyfile="/Users/jakerye/projects/gro-microcontroller/src/support_software_serial.cpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="support__software__serial_8cpp_1a43461cbce55a8b1f98dae56d963c941d" prot="public" static="no">
        <name>_DEBUG_PIN1</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jakerye/projects/gro-microcontroller/src/support_software_serial.cpp" line="41" column="9" bodyfile="/Users/jakerye/projects/gro-microcontroller/src/support_software_serial.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="support__software__serial_8cpp_1af51dd94e466b8a6a5fb199736b78e531" prot="public" static="no">
        <name>_DEBUG_PIN2</name>
        <initializer>13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jakerye/projects/gro-microcontroller/src/support_software_serial.cpp" line="42" column="9" bodyfile="/Users/jakerye/projects/gro-microcontroller/src/support_software_serial.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="support__software__serial_8cpp_1a7ba959374e79d3320d69af12f7307f44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void DebugPulse</definition>
        <argsstring>(uint8_t pin, uint8_t count)</argsstring>
        <name>DebugPulse</name>
        <param>
          <type>uint8_t</type>
          <declname>pin</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jakerye/projects/gro-microcontroller/src/support_software_serial.cpp" line="65" column="1" bodyfile="/Users/jakerye/projects/gro-microcontroller/src/support_software_serial.cpp" bodystart="65" bodyend="77"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Support module for serial communication. </para>    </briefdescription>
    <detaileddescription>
<para>See arduino software serial module for details: <ulink url="https://www.arduino.cc/en/Reference/SoftwareSerial">https://www.arduino.cc/en/Reference/SoftwareSerial</ulink> </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7"><highlight class="comment">SoftwareSerial.cpp<sp/>(formerly<sp/>NewSoftSerial.cpp)<sp/>-<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment">Multi-instance<sp/>software<sp/>serial<sp/>library<sp/>for<sp/>Arduino/Wiring</highlight></codeline>
<codeline lineno="9"><highlight class="comment">--<sp/>Interrupt-driven<sp/>receive<sp/>and<sp/>other<sp/>improvements<sp/>by<sp/>ladyada</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/>(http://ladyada.net)</highlight></codeline>
<codeline lineno="11"><highlight class="comment">--<sp/>Tuning,<sp/>circular<sp/>buffer,<sp/>derivation<sp/>from<sp/>class<sp/>Print/Stream,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/>multi-instance<sp/>support,<sp/>porting<sp/>to<sp/>8MHz<sp/>processors,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/>various<sp/>optimizations,<sp/>PROGMEM<sp/>delay<sp/>tables,<sp/>inverse<sp/>logic<sp/>and<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/>direct<sp/>port<sp/>writing<sp/>by<sp/>Mikal<sp/>Hart<sp/>(http://www.arduiniana.org)</highlight></codeline>
<codeline lineno="15"><highlight class="comment">--<sp/>Pin<sp/>change<sp/>interrupt<sp/>macros<sp/>by<sp/>Paul<sp/>Stoffregen<sp/>(http://www.pjrc.com)</highlight></codeline>
<codeline lineno="16"><highlight class="comment">--<sp/>20MHz<sp/>processor<sp/>support<sp/>by<sp/>Garrett<sp/>Mace<sp/>(http://www.macetech.com)</highlight></codeline>
<codeline lineno="17"><highlight class="comment">--<sp/>ATmega1280/2560<sp/>support<sp/>by<sp/>Brett<sp/>Hagman<sp/>(http://www.roguerobotics.com/)</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="20"><highlight class="comment">modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="21"><highlight class="comment">License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="22"><highlight class="comment">version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight></codeline>
<codeline lineno="24"><highlight class="comment">This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="25"><highlight class="comment">but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="26"><highlight class="comment">MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="27"><highlight class="comment">Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight></codeline>
<codeline lineno="29"><highlight class="comment">You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="30"><highlight class="comment">License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="31"><highlight class="comment">Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>St,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="32"><highlight class="comment"></highlight></codeline>
<codeline lineno="33"><highlight class="comment">The<sp/>latest<sp/>version<sp/>of<sp/>this<sp/>library<sp/>can<sp/>always<sp/>be<sp/>found<sp/>at</highlight></codeline>
<codeline lineno="34"><highlight class="comment">http://arduiniana.org.</highlight></codeline>
<codeline lineno="35"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>set,<sp/>_DEBUG<sp/>co-opts<sp/>pins<sp/>11<sp/>and<sp/>13<sp/>for<sp/>debugging<sp/>with<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>oscilloscope<sp/>or<sp/>logic<sp/>analyzer.<sp/><sp/>Beware:<sp/>it<sp/>also<sp/>slightly<sp/>modifies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>bit<sp/>times,<sp/>so<sp/>don&apos;t<sp/>rely<sp/>on<sp/>it<sp/>too<sp/>much<sp/>at<sp/>high<sp/>baud<sp/>rates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_DEBUG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_DEBUG_PIN1<sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_DEBUG_PIN2<sp/>13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;avr/interrupt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;avr/pgmspace.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Arduino.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="support__software__serial_8h" kindref="compound">support_software_serial.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;util/delay_basic.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Statics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="class_software_serial" kindref="compound">SoftwareSerial</ref><sp/>*SoftwareSerial::active_object<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>SoftwareSerial::_receive_buffer[<ref refid="support__software__serial_8h_1af67c8adbca054838dd8a5b9043ffd64a" kindref="member">_SS_MAX_RX_BUFF</ref>];<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>SoftwareSerial::_receive_buffer_tail<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>SoftwareSerial::_receive_buffer_head<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>generates<sp/>a<sp/>brief<sp/>pulse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>debugging<sp/>or<sp/>measuring<sp/>on<sp/>an<sp/>oscilloscope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="support__software__serial_8cpp_1a7ba959374e79d3320d69af12f7307f44" kindref="member">DebugPulse</ref>(uint8_t<sp/>pin,<sp/>uint8_t<sp/>count)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*pport<sp/>=<sp/>portOutputRegister(digitalPinToPort(pin));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>uint8_t<sp/>val<sp/>=<sp/>*pport;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(count--)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>*pport<sp/>=<sp/>val<sp/>|<sp/>digitalPinToBitMask(pin);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>*pport<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Private<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>static<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SoftwareSerial::tunedDelay(uint16_t<sp/>delay)<sp/>{<sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>_delay_loop_2(delay);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>sets<sp/>the<sp/>current<sp/>object<sp/>as<sp/>the<sp/>&quot;listening&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>one<sp/>and<sp/>returns<sp/>true<sp/>if<sp/>it<sp/>replaces<sp/>another<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_software_serial_1ad235539ef28939836bd0bde9387eb8fc" kindref="member">SoftwareSerial::listen</ref>()</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_rx_delay_stopbit)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(active_object<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(active_object)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>active_object-&gt;<ref refid="class_software_serial_1a1c87a6b43c176c104f28e2c2eec2841e" kindref="member">stopListening</ref>();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>_buffer_overflow<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>_receive_buffer_head<sp/>=<sp/>_receive_buffer_tail<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>active_object<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>setRxIntMsk(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stop<sp/>listening.<sp/>Returns<sp/>true<sp/>if<sp/>we<sp/>were<sp/>actually<sp/>listening.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_software_serial_1a1c87a6b43c176c104f28e2c2eec2841e" kindref="member">SoftwareSerial::stopListening</ref>()</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(active_object<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>setRxIntMsk(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>active_object<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>receive<sp/>routine<sp/>called<sp/>by<sp/>the<sp/>interrupt<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SoftwareSerial::recv()</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GCC_VERSION<sp/>&lt;<sp/>40302</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Work-around<sp/>for<sp/>avr-gcc<sp/>4.3.0<sp/>OSX<sp/>version<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Preserve<sp/>the<sp/>registers<sp/>that<sp/>the<sp/>compiler<sp/>misses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(courtesy<sp/>of<sp/>Arduino<sp/>forum<sp/>user<sp/>*etracer*)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;push<sp/>r18<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;push<sp/>r19<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;push<sp/>r20<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;push<sp/>r21<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;push<sp/>r22<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;push<sp/>r23<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;push<sp/>r26<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;push<sp/>r27<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>::);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>uint8_t<sp/>d<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>RX<sp/>line<sp/>is<sp/>high,<sp/>then<sp/>we<sp/>don&apos;t<sp/>see<sp/>any<sp/>start<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>interrupt<sp/>is<sp/>probably<sp/>not<sp/>for<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_inverse_logic<sp/>?<sp/>rx_pin_read()<sp/>:<sp/>!rx_pin_read())</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>further<sp/>interrupts<sp/>during<sp/>reception,<sp/>this<sp/>prevents</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>triggering<sp/>another<sp/>interrupt<sp/>directly<sp/>after<sp/>we<sp/>return,<sp/>which<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cause<sp/>problems<sp/>at<sp/>higher<sp/>baudrates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>setRxIntMsk(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>approximately<sp/>1/2<sp/>of<sp/>a<sp/>bit<sp/>width<sp/>to<sp/>&quot;center&quot;<sp/>the<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>tunedDelay(_rx_delay_centering);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="support__software__serial_8cpp_1a7ba959374e79d3320d69af12f7307f44" kindref="member">DebugPulse</ref>(<ref refid="support__software__serial_8cpp_1af51dd94e466b8a6a5fb199736b78e531" kindref="member">_DEBUG_PIN2</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>each<sp/>of<sp/>the<sp/>8<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i=8;<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tunedDelay(_rx_delay_intrabit);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="support__software__serial_8cpp_1a7ba959374e79d3320d69af12f7307f44" kindref="member">DebugPulse</ref>(<ref refid="support__software__serial_8cpp_1af51dd94e466b8a6a5fb199736b78e531" kindref="member">_DEBUG_PIN2</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx_pin_read())</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>|=<sp/>0x80;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_inverse_logic)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>~d;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>buffer<sp/>full,<sp/>set<sp/>the<sp/>overflow<sp/>flag<sp/>and<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>next<sp/>=<sp/>(_receive_buffer_tail<sp/>+<sp/>1)<sp/>%<sp/><ref refid="support__software__serial_8h_1af67c8adbca054838dd8a5b9043ffd64a" kindref="member">_SS_MAX_RX_BUFF</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>!=<sp/>_receive_buffer_head)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>new<sp/>data<sp/>in<sp/>buffer:<sp/>tail<sp/>points<sp/>to<sp/>where<sp/>byte<sp/>goes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_receive_buffer[_receive_buffer_tail]<sp/>=<sp/>d;<sp/></highlight><highlight class="comment">//<sp/>save<sp/>new<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_receive_buffer_tail<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="support__software__serial_8cpp_1a7ba959374e79d3320d69af12f7307f44" kindref="member">DebugPulse</ref>(<ref refid="support__software__serial_8cpp_1a43461cbce55a8b1f98dae56d963c941d" kindref="member">_DEBUG_PIN1</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_buffer_overflow<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>the<sp/>stop<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>tunedDelay(_rx_delay_stopbit);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="support__software__serial_8cpp_1a7ba959374e79d3320d69af12f7307f44" kindref="member">DebugPulse</ref>(<ref refid="support__software__serial_8cpp_1a43461cbce55a8b1f98dae56d963c941d" kindref="member">_DEBUG_PIN1</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Re-enable<sp/>interrupts<sp/>when<sp/>we&apos;re<sp/>sure<sp/>to<sp/>be<sp/>inside<sp/>the<sp/>stop<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>setRxIntMsk(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GCC_VERSION<sp/>&lt;<sp/>40302</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Work-around<sp/>for<sp/>avr-gcc<sp/>4.3.0<sp/>OSX<sp/>version<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>registers<sp/>that<sp/>the<sp/>compiler<sp/>misses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pop<sp/>r27<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pop<sp/>r26<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pop<sp/>r23<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pop<sp/>r22<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pop<sp/>r21<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pop<sp/>r20<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pop<sp/>r19<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pop<sp/>r18<sp/>\n\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>::);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">uint8_t<sp/>SoftwareSerial::rx_pin_read()</highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*_receivePortRegister<sp/>&amp;<sp/>_receiveBitMask;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Interrupt<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>static<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_software_serial_1a8700c768d3c5d681362253324852ceee" kindref="member">SoftwareSerial::handle_interrupt</ref>()</highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(active_object)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>active_object-&gt;recv();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PCINT0_vect)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">ISR(PCINT0_vect)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><ref refid="class_software_serial_1a8700c768d3c5d681362253324852ceee" kindref="member">SoftwareSerial::handle_interrupt</ref>();</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PCINT1_vect)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">ISR(PCINT1_vect,<sp/>ISR_ALIASOF(PCINT0_vect));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PCINT2_vect)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">ISR(PCINT2_vect,<sp/>ISR_ALIASOF(PCINT0_vect));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PCINT3_vect)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">ISR(PCINT3_vect,<sp/>ISR_ALIASOF(PCINT0_vect));</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><ref refid="class_software_serial_1aab36336db4a1ca5073071c07d910cb87" kindref="member">SoftwareSerial::SoftwareSerial</ref>(uint8_t<sp/>receivePin,<sp/>uint8_t<sp/>transmitPin,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inverse_logic<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>false<sp/>*/</highlight><highlight class="normal">)<sp/>:<sp/></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>_rx_delay_centering(0),</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>_rx_delay_intrabit(0),</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>_rx_delay_stopbit(0),</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>_tx_delay(0),</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>_buffer_overflow(false),</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>_inverse_logic(inverse_logic)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>setTX(transmitPin);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>setRX(receivePin);</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><ref refid="class_software_serial_1af6b8fff282e09a6cecc5df669ae71ee7" kindref="member">SoftwareSerial::~SoftwareSerial</ref>()</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="class_software_serial_1a9034270f7de617b3cc7d3f38f3a8e0df" kindref="member">end</ref>();</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SoftwareSerial::setTX(uint8_t<sp/>tx)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>write,<sp/>then<sp/>set<sp/>output.<sp/>If<sp/>we<sp/>do<sp/>this<sp/>the<sp/>other<sp/>way<sp/>around,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>pin<sp/>would<sp/>be<sp/>output<sp/>low<sp/>for<sp/>a<sp/>short<sp/>while<sp/>before<sp/>switching<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>hihg.<sp/>Now,<sp/>it<sp/>is<sp/>input<sp/>with<sp/>pullup<sp/>for<sp/>a<sp/>short<sp/>while,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>fine.<sp/>With<sp/>inverse<sp/>logic,<sp/>either<sp/>order<sp/>is<sp/>fine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>digitalWrite(tx,<sp/>_inverse_logic<sp/>?<sp/>LOW<sp/>:<sp/>HIGH);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>pinMode(tx,<sp/>OUTPUT);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>_transmitBitMask<sp/>=<sp/>digitalPinToBitMask(tx);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>uint8_t<sp/>port<sp/>=<sp/>digitalPinToPort(tx);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>_transmitPortRegister<sp/>=<sp/>portOutputRegister(port);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SoftwareSerial::setRX(uint8_t<sp/>rx)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>pinMode(rx,<sp/>INPUT);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_inverse_logic)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>digitalWrite(rx,<sp/>HIGH);<sp/><sp/></highlight><highlight class="comment">//<sp/>pullup<sp/>for<sp/>normal<sp/>logic!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>_receivePin<sp/>=<sp/>rx;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>_receiveBitMask<sp/>=<sp/>digitalPinToBitMask(rx);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>uint8_t<sp/>port<sp/>=<sp/>digitalPinToPort(rx);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>_receivePortRegister<sp/>=<sp/>portInputRegister(port);</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">uint16_t<sp/>SoftwareSerial::subtract_cap(uint16_t<sp/>num,<sp/>uint16_t<sp/>sub)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>&gt;<sp/>sub)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num<sp/>-<sp/>sub;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Public<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_software_serial_1af1b194359d70894b3a2f38236a68480e" kindref="member">SoftwareSerial::begin</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>speed)</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>_rx_delay_centering<sp/>=<sp/>_rx_delay_intrabit<sp/>=<sp/>_rx_delay_stopbit<sp/>=<sp/>_tx_delay<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Precalculate<sp/>the<sp/>various<sp/>delays,<sp/>in<sp/>number<sp/>of<sp/>4-cycle<sp/>delays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>uint16_t<sp/>bit_delay<sp/>=<sp/>(F_CPU<sp/>/<sp/>speed)<sp/>/<sp/>4;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>12<sp/>(gcc<sp/>4.8.2)<sp/>or<sp/>13<sp/>(gcc<sp/>4.3.2)<sp/>cycles<sp/>from<sp/>start<sp/>bit<sp/>to<sp/>first<sp/>bit,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>15<sp/>(gcc<sp/>4.8.2)<sp/>or<sp/>16<sp/>(gcc<sp/>4.3.2)<sp/>cycles<sp/>between<sp/>bits,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>12<sp/>(gcc<sp/>4.8.2)<sp/>or<sp/>14<sp/>(gcc<sp/>4.3.2)<sp/>cycles<sp/>from<sp/>last<sp/>bit<sp/>to<sp/>stop<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>all<sp/>close<sp/>enough<sp/>to<sp/>just<sp/>use<sp/>15<sp/>cycles,<sp/>since<sp/>the<sp/>inter-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>timings<sp/>are<sp/>the<sp/>most<sp/>critical<sp/>(deviations<sp/>stack<sp/>8<sp/>times)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>_tx_delay<sp/>=<sp/>subtract_cap(bit_delay,<sp/>15<sp/>/<sp/>4);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>setup<sp/>rx<sp/>when<sp/>we<sp/>have<sp/>a<sp/>valid<sp/>PCINT<sp/>for<sp/>this<sp/>pin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(digitalPinToPCICR(_receivePin))<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>GCC_VERSION<sp/>&gt;<sp/>40800</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Timings<sp/>counted<sp/>from<sp/>gcc<sp/>4.8.2<sp/>output.<sp/>This<sp/>works<sp/>up<sp/>to<sp/>115200<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>16Mhz<sp/>and<sp/>57600<sp/>on<sp/>8Mhz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>the<sp/>start<sp/>bit<sp/>occurs,<sp/>there<sp/>are<sp/>3<sp/>or<sp/>4<sp/>cycles<sp/>before<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interrupt<sp/>flag<sp/>is<sp/>set,<sp/>4<sp/>cycles<sp/>before<sp/>the<sp/>PC<sp/>is<sp/>set<sp/>to<sp/>the<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interrupt<sp/>vector<sp/>address<sp/>and<sp/>the<sp/>old<sp/>PC<sp/>is<sp/>pushed<sp/>on<sp/>the<sp/>stack,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>75<sp/>cycles<sp/>of<sp/>instructions<sp/>(including<sp/>the<sp/>RJMP<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ISR<sp/>vector<sp/>table)<sp/>until<sp/>the<sp/>first<sp/>delay.<sp/>After<sp/>the<sp/>delay,<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>17<sp/>more<sp/>cycles<sp/>until<sp/>the<sp/>pin<sp/>value<sp/>is<sp/>read<sp/>(excluding<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delay<sp/>in<sp/>the<sp/>loop).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>to<sp/>have<sp/>a<sp/>total<sp/>delay<sp/>of<sp/>1.5<sp/>bit<sp/>time.<sp/>Inside<sp/>the<sp/>loop,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>already<sp/>wait<sp/>for<sp/>1<sp/>bit<sp/>time<sp/>-<sp/>23<sp/>cycles,<sp/>so<sp/>here<sp/>we<sp/>wait<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0.5<sp/>bit<sp/>time<sp/>-<sp/>(71<sp/>+<sp/>18<sp/>-<sp/>22)<sp/>cycles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>_rx_delay_centering<sp/>=<sp/>subtract_cap(bit_delay<sp/>/<sp/>2,<sp/>(4<sp/>+<sp/>4<sp/>+<sp/>75<sp/>+<sp/>17<sp/>-<sp/>23)<sp/>/<sp/>4);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>23<sp/>cycles<sp/>in<sp/>each<sp/>loop<sp/>iteration<sp/>(excluding<sp/>the<sp/>delay)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>_rx_delay_intrabit<sp/>=<sp/>subtract_cap(bit_delay,<sp/>23<sp/>/<sp/>4);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>37<sp/>cycles<sp/>from<sp/>the<sp/>last<sp/>bit<sp/>read<sp/>to<sp/>the<sp/>start<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stopbit<sp/>delay<sp/>and<sp/>11<sp/>cycles<sp/>from<sp/>the<sp/>delay<sp/>until<sp/>the<sp/>interrupt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mask<sp/>is<sp/>enabled<sp/>again<sp/>(which<sp/>_must_<sp/>happen<sp/>during<sp/>the<sp/>stopbit).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>delay<sp/>aims<sp/>at<sp/>3/4<sp/>of<sp/>a<sp/>bit<sp/>time,<sp/>meaning<sp/>the<sp/>end<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delay<sp/>will<sp/>be<sp/>at<sp/>1/4th<sp/>of<sp/>the<sp/>stopbit.<sp/>This<sp/>allows<sp/>some<sp/>extra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>for<sp/>ISR<sp/>cleanup,<sp/>which<sp/>makes<sp/>115200<sp/>baud<sp/>at<sp/>16Mhz<sp/>work<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reliably</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>_rx_delay_stopbit<sp/>=<sp/>subtract_cap(bit_delay<sp/>*<sp/>3<sp/>/<sp/>4,<sp/>(37<sp/>+<sp/>11)<sp/>/<sp/>4);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else<sp/>//<sp/>Timings<sp/>counted<sp/>from<sp/>gcc<sp/>4.3.2<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>code<sp/>is<sp/>a<sp/>_lot_<sp/>slower,<sp/>mostly<sp/>due<sp/>to<sp/>bad<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocation<sp/>choices<sp/>of<sp/>gcc.<sp/>This<sp/>works<sp/>up<sp/>to<sp/>57600<sp/>on<sp/>16Mhz<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>38400<sp/>on<sp/>8Mhz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>_rx_delay_centering<sp/>=<sp/>subtract_cap(bit_delay<sp/>/<sp/>2,<sp/>(4<sp/>+<sp/>4<sp/>+<sp/>97<sp/>+<sp/>29<sp/>-<sp/>11)<sp/>/<sp/>4);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>_rx_delay_intrabit<sp/>=<sp/>subtract_cap(bit_delay,<sp/>11<sp/>/<sp/>4);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>_rx_delay_stopbit<sp/>=<sp/>subtract_cap(bit_delay<sp/>*<sp/>3<sp/>/<sp/>4,<sp/>(44<sp/>+<sp/>17)<sp/>/<sp/>4);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>the<sp/>PCINT<sp/>for<sp/>the<sp/>entire<sp/>port<sp/>here,<sp/>but<sp/>never<sp/>disable<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(others<sp/>might<sp/>also<sp/>need<sp/>it,<sp/>so<sp/>we<sp/>disable<sp/>the<sp/>interrupt<sp/>by<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>per-pin<sp/>PCMSK<sp/>register).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>*digitalPinToPCICR(_receivePin)<sp/>|=<sp/>_BV(digitalPinToPCICRbit(_receivePin));</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Precalculate<sp/>the<sp/>pcint<sp/>mask<sp/>register<sp/>and<sp/>value,<sp/>so<sp/>setRxIntMask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>used<sp/>inside<sp/>the<sp/>ISR<sp/>without<sp/>costing<sp/>too<sp/>much<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>_pcint_maskreg<sp/>=<sp/>digitalPinToPCMSK(_receivePin);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>_pcint_maskvalue<sp/>=<sp/>_BV(digitalPinToPCMSKbit(_receivePin));</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>tunedDelay(_tx_delay);<sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>were<sp/>low<sp/>this<sp/>establishes<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>pinMode(<ref refid="support__software__serial_8cpp_1a43461cbce55a8b1f98dae56d963c941d" kindref="member">_DEBUG_PIN1</ref>,<sp/>OUTPUT);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>pinMode(<ref refid="support__software__serial_8cpp_1af51dd94e466b8a6a5fb199736b78e531" kindref="member">_DEBUG_PIN2</ref>,<sp/>OUTPUT);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><ref refid="class_software_serial_1ad235539ef28939836bd0bde9387eb8fc" kindref="member">listen</ref>();</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SoftwareSerial::setRxIntMsk(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*_pcint_maskreg<sp/>|=<sp/>_pcint_maskvalue;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*_pcint_maskreg<sp/>&amp;=<sp/>~_pcint_maskvalue;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_software_serial_1a9034270f7de617b3cc7d3f38f3a8e0df" kindref="member">SoftwareSerial::end</ref>()</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><ref refid="class_software_serial_1a1c87a6b43c176c104f28e2c2eec2841e" kindref="member">stopListening</ref>();</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>data<sp/>from<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_software_serial_1a2d0b2f2868d519c716114777f482705b" kindref="member">SoftwareSerial::read</ref>()</highlight></codeline>
<codeline lineno="396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_software_serial_1a7b3fb4a8f57d2b5f2233f841d71ef80f" kindref="member">isListening</ref>())</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>buffer?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_receive_buffer_head<sp/>==<sp/>_receive_buffer_tail)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>from<sp/>&quot;head&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>uint8_t<sp/>d<sp/>=<sp/>_receive_buffer[_receive_buffer_head];<sp/></highlight><highlight class="comment">//<sp/>grab<sp/>next<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>_receive_buffer_head<sp/>=<sp/>(_receive_buffer_head<sp/>+<sp/>1)<sp/>%<sp/><ref refid="support__software__serial_8h_1af67c8adbca054838dd8a5b9043ffd64a" kindref="member">_SS_MAX_RX_BUFF</ref>;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_software_serial_1a4cbf77a4e90e15ca576972d7952659c5" kindref="member">SoftwareSerial::available</ref>()</highlight></codeline>
<codeline lineno="411"><highlight class="normal">{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_software_serial_1a7b3fb4a8f57d2b5f2233f841d71ef80f" kindref="member">isListening</ref>())</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_receive_buffer_tail<sp/>+<sp/><ref refid="support__software__serial_8h_1af67c8adbca054838dd8a5b9043ffd64a" kindref="member">_SS_MAX_RX_BUFF</ref><sp/>-<sp/>_receive_buffer_head)<sp/>%<sp/><ref refid="support__software__serial_8h_1af67c8adbca054838dd8a5b9043ffd64a" kindref="member">_SS_MAX_RX_BUFF</ref>;</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_software_serial_1ac24e5c6af203ec636c0a200b0cb3caf0" kindref="member">SoftwareSerial::write</ref>(uint8_t<sp/>b)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_tx_delay<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>setWriteError();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>declaring<sp/>these<sp/>as<sp/>local<sp/>variables,<sp/>the<sp/>compiler<sp/>will<sp/>put<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>registers<sp/>_before_<sp/>disabling<sp/>interrupts<sp/>and<sp/>entering<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>critical<sp/>timing<sp/>sections<sp/>below,<sp/>which<sp/>makes<sp/>it<sp/>a<sp/>lot<sp/>easier<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>verify<sp/>the<sp/>cycle<sp/>timings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*reg<sp/>=<sp/>_transmitPortRegister;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>uint8_t<sp/>reg_mask<sp/>=<sp/>_transmitBitMask;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>uint8_t<sp/>inv_mask<sp/>=<sp/>~_transmitBitMask;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>uint8_t<sp/>oldSREG<sp/>=<sp/>SREG;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inv<sp/>=<sp/>_inverse_logic;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>uint16_t<sp/>delay<sp/>=<sp/>_tx_delay;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inv)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>~b;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>cli();<sp/><sp/></highlight><highlight class="comment">//<sp/>turn<sp/>off<sp/>interrupts<sp/>for<sp/>a<sp/>clean<sp/>txmit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>the<sp/>start<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inv)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>*reg<sp/>|=<sp/>reg_mask;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>*reg<sp/>&amp;=<sp/>inv_mask;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>tunedDelay(delay);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>each<sp/>of<sp/>the<sp/>8<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>8;<sp/>i<sp/>&gt;<sp/>0;<sp/>--i)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>&amp;<sp/>1)<sp/></highlight><highlight class="comment">//<sp/>choose<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*reg<sp/>|=<sp/>reg_mask;<sp/></highlight><highlight class="comment">//<sp/>send<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*reg<sp/>&amp;=<sp/>inv_mask;<sp/></highlight><highlight class="comment">//<sp/>send<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>tunedDelay(delay);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>restore<sp/>pin<sp/>to<sp/>natural<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inv)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>*reg<sp/>&amp;=<sp/>inv_mask;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>*reg<sp/>|=<sp/>reg_mask;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>SREG<sp/>=<sp/>oldSREG;<sp/></highlight><highlight class="comment">//<sp/>turn<sp/>interrupts<sp/>back<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>tunedDelay(_tx_delay);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_software_serial_1a9a46db376a19fc958e011e38799b902c" kindref="member">SoftwareSerial::flush</ref>()</highlight></codeline>
<codeline lineno="474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_software_serial_1a7b3fb4a8f57d2b5f2233f841d71ef80f" kindref="member">isListening</ref>())</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>uint8_t<sp/>oldSREG<sp/>=<sp/>SREG;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>cli();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>_receive_buffer_head<sp/>=<sp/>_receive_buffer_tail<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>SREG<sp/>=<sp/>oldSREG;</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_software_serial_1a51c2d2e79f0d982b1ef9cc9ac4453648" kindref="member">SoftwareSerial::peek</ref>()</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_software_serial_1a7b3fb4a8f57d2b5f2233f841d71ef80f" kindref="member">isListening</ref>())</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>buffer?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_receive_buffer_head<sp/>==<sp/>_receive_buffer_tail)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>from<sp/>&quot;head&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_receive_buffer[_receive_buffer_head];</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/jakerye/projects/gro-microcontroller/src/support_software_serial.cpp"/>
  </compounddef>
</doxygen>
